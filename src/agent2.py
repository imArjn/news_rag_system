# src/agent2.py

from src.embedding import get_embedding
from src.search import search
from src.summarization import generate_summary_local

# Attempt to import our HybridSearch class.
try:
    from src.hybrid_search import HybridSearch
except ImportError:
    HybridSearch = None

def retrieve_and_summarize(query: str, data, index, top_k: int = 3, use_hybrid: bool = False, alpha: float = 0.5) -> str:
    """
    Given a query, retrieve the most relevant news articles from the preprocessed data
    and generate a concatenated summary of their short descriptions.
    
    Parameters:
        query (str): The user query.
        data (pandas.DataFrame): The preprocessed news dataset.
        index (faiss.Index): The FAISS index built over article embeddings.
        top_k (int): Number of articles to retrieve.
        use_hybrid (bool): If True, use hybrid search (combining semantic and keyword-based retrieval);
                           if False, use semantic search only.
        alpha (float): Weight parameter for hybrid search. 
                       (alpha = 1.0: all semantic; alpha = 0.0: all keyword-based.)
    
    Returns:
        str: A combined summary string generated by summarizing the retrieved articles.
    """
    # Generate an embedding for the query.
    query_embedding = get_embedding(query)
    
    # Retrieve candidate indices.
    if use_hybrid and HybridSearch is not None:
        # Initialize hybrid search with the specified TF-IDF field (e.g., "short_description").
        hs = HybridSearch(data, tfidf_field="short_description")
        candidate_indices = hs.search(query, index, top_k=top_k, alpha=alpha)
    else:
        # Use semantic search only.
        indices, distances = search(index, query_embedding, top_k)
        candidate_indices = indices[0].tolist()
    
    # Debug: print out the retrieved indices.
    print("DEBUG: Retrieved indices:", candidate_indices)
    
    summaries = []
    # Loop through candidate indices.
    for idx in candidate_indices:
        article = data.iloc[idx]
        headline = article.get("headline", "No Headline")
        short_description = article.get("short_description", "")
        
        # Debug: print details about the retrieved article.
        print(f"DEBUG: Processing article at index {idx}:")
        print(f"         Headline: {headline}")
        print(f"         Short Description: {short_description}")
        
        # Generate a summary for the article's short description.
        summary = generate_summary_local(short_description)
        summaries.append(summary)
    
    # Combine the summaries into one string.
    combined_summary = " ".join(summaries)
    print("DEBUG: Combined Summary:", combined_summary)
    
    return combined_summary

if __name__ == '__main__':
    # Standalone testing can be done if you load your data and index.
    # For example:
    #   import pandas as pd
    #   data = pd.read_json("data/sample.json", lines=True)
    #   # Build embeddings and FAISS index accordingly...
    #   summary = retrieve_and_summarize("Joe Biden vaccines", data, index, top_k=3, use_hybrid=True, alpha=0.5)
    #   print(summary)
    pass
